require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

console.log('üîß ÂâµÂª∫‰ªòË≤ªÁõ∏ÈóúË≥áÊñôÂ∫´Ë°®ÁµêÊßã...\n');

async function createPaymentTables() {
  try {
    // 1. ÂâµÂª∫ dev_checkouts Ë°®
    console.log('üìã 1. ÂâµÂª∫ dev_checkouts Ë°®...');
    const checkoutTableSQL = `
      CREATE TABLE IF NOT EXISTS dev_checkouts (
        id SERIAL PRIMARY KEY,
        checkout_id VARCHAR(255) UNIQUE NOT NULL,
        user_id VARCHAR(255) NOT NULL,
        type VARCHAR(50) NOT NULL DEFAULT 'token',
        status VARCHAR(50) NOT NULL DEFAULT 'pending',
        merchant_id VARCHAR(100),
        success_url TEXT,
        failure_url TEXT,
        webhook_url TEXT,
        custom_id TEXT,
        response_data JSONB,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );
    `;

    const { data: checkoutResult, error: checkoutError } = await supabase.rpc('exec_sql', { 
      sql: checkoutTableSQL 
    });

    if (checkoutError) {
      console.error('‚ùå ÂâµÂª∫ dev_checkouts Ë°®Â§±Êïó:', checkoutError);
    } else {
      console.log('‚úÖ dev_checkouts Ë°®ÂâµÂª∫ÊàêÂäü');
    }

    // 2. ÂâµÂª∫ dev_tokens Ë°®
    console.log('\nüé´ 2. ÂâµÂª∫ dev_tokens Ë°®...');
    const tokenTableSQL = `
      CREATE TABLE IF NOT EXISTS dev_tokens (
        id SERIAL PRIMARY KEY,
        token VARCHAR(500) UNIQUE NOT NULL,
        user_id VARCHAR(255) NOT NULL,
        transaction_id VARCHAR(255),
        checkout_id VARCHAR(255),
        status VARCHAR(50) NOT NULL DEFAULT 'active',
        merchant_id VARCHAR(100),
        custom_data JSONB,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        expires_at TIMESTAMP WITH TIME ZONE
      );
    `;

    const { data: tokenResult, error: tokenError } = await supabase.rpc('exec_sql', { 
      sql: tokenTableSQL 
    });

    if (tokenError) {
      console.error('‚ùå ÂâµÂª∫ dev_tokens Ë°®Â§±Êïó:', tokenError);
    } else {
      console.log('‚úÖ dev_tokens Ë°®ÂâµÂª∫ÊàêÂäü');
    }

    // 3. ÂâµÂª∫ dev_paid_users Ë°®
    console.log('\nüë§ 3. ÂâµÂª∫ dev_paid_users Ë°®...');
    const paidUserTableSQL = `
      CREATE TABLE IF NOT EXISTS dev_paid_users (
        id SERIAL PRIMARY KEY,
        user_id VARCHAR(255) UNIQUE NOT NULL,
        token VARCHAR(500),
        status VARCHAR(50) NOT NULL DEFAULT 'active',
        plan VARCHAR(50),
        subscription_start TIMESTAMP WITH TIME ZONE,
        subscription_end TIMESTAMP WITH TIME ZONE,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );
    `;

    const { data: paidUserResult, error: paidUserError } = await supabase.rpc('exec_sql', { 
      sql: paidUserTableSQL 
    });

    if (paidUserError) {
      console.error('‚ùå ÂâµÂª∫ dev_paid_users Ë°®Â§±Êïó:', paidUserError);
    } else {
      console.log('‚úÖ dev_paid_users Ë°®ÂâµÂª∫ÊàêÂäü');
    }

    // 4. ÂâµÂª∫ dev_webhook_logs Ë°®
    console.log('\nüìû 4. ÂâµÂª∫ dev_webhook_logs Ë°®...');
    const webhookLogTableSQL = `
      CREATE TABLE IF NOT EXISTS dev_webhook_logs (
        id SERIAL PRIMARY KEY,
        webhook_type VARCHAR(50) NOT NULL,
        status VARCHAR(50) NOT NULL DEFAULT 'received',
        payload JSONB NOT NULL,
        user_id VARCHAR(255),
        checkout_id VARCHAR(255),
        transaction_id VARCHAR(255),
        processed_at TIMESTAMP WITH TIME ZONE,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );
    `;

    const { data: webhookResult, error: webhookError } = await supabase.rpc('exec_sql', { 
      sql: webhookLogTableSQL 
    });

    if (webhookError) {
      console.error('‚ùå ÂâµÂª∫ dev_webhook_logs Ë°®Â§±Êïó:', webhookError);
    } else {
      console.log('‚úÖ dev_webhook_logs Ë°®ÂâµÂª∫ÊàêÂäü');
    }

    console.log('\nüéâ ‰ªòË≤ªÁõ∏ÈóúË°®ÁµêÊßãÂâµÂª∫ÂÆåÊàêÔºÅ');
    console.log('üìã Â∑≤ÂâµÂª∫ÁöÑË°®:');
    console.log('  - dev_checkouts: ÂÑ≤Â≠ò checkout Ë®òÈåÑ');
    console.log('  - dev_tokens: ÂÑ≤Â≠ò payment tokens');  
    console.log('  - dev_paid_users: ÂÑ≤Â≠ò‰ªòË≤ªÁî®Êà∂Ë≥áË®ä');
    console.log('  - dev_webhook_logs: ÂÑ≤Â≠ò webhook Êó•Ë™å');

  } catch (error) {
    console.error('‚ùå ÂâµÂª∫Ë°®ÁµêÊßãÊôÇÁôºÁîüÈåØË™§:', error);
    
    // Â¶ÇÊûú RPC ÊñπÊ≥ï‰∏çÂ≠òÂú®ÔºåÁµ¶Âá∫Êõø‰ª£ÊñπÊ°à
    if (error.message && error.message.includes('rpc')) {
      console.log('\nüí° Êõø‰ª£ÊñπÊ°à: Ë´ãÊâãÂãïÂú® Supabase Dashboard ‰∏≠Âü∑Ë°å‰ª•‰∏ã SQL:');
      console.log('\n-- 1. dev_checkouts Ë°®');
      console.log(`CREATE TABLE IF NOT EXISTS dev_checkouts (
        id SERIAL PRIMARY KEY,
        checkout_id VARCHAR(255) UNIQUE NOT NULL,
        user_id VARCHAR(255) NOT NULL,
        type VARCHAR(50) NOT NULL DEFAULT 'token',
        status VARCHAR(50) NOT NULL DEFAULT 'pending',
        merchant_id VARCHAR(100),
        success_url TEXT,
        failure_url TEXT,
        webhook_url TEXT,
        custom_id TEXT,
        response_data JSONB,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );`);

      console.log('\n-- 2. dev_tokens Ë°®');
      console.log(`CREATE TABLE IF NOT EXISTS dev_tokens (
        id SERIAL PRIMARY KEY,
        token VARCHAR(500) UNIQUE NOT NULL,
        user_id VARCHAR(255) NOT NULL,
        transaction_id VARCHAR(255),
        checkout_id VARCHAR(255),
        status VARCHAR(50) NOT NULL DEFAULT 'active',
        merchant_id VARCHAR(100),
        custom_data JSONB,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        expires_at TIMESTAMP WITH TIME ZONE
      );`);

      console.log('\n-- 3. dev_paid_users Ë°®');
      console.log(`CREATE TABLE IF NOT EXISTS dev_paid_users (
        id SERIAL PRIMARY KEY,
        user_id VARCHAR(255) UNIQUE NOT NULL,
        token VARCHAR(500),
        status VARCHAR(50) NOT NULL DEFAULT 'active',
        plan VARCHAR(50),
        subscription_start TIMESTAMP WITH TIME ZONE,
        subscription_end TIMESTAMP WITH TIME ZONE,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );`);

      console.log('\n-- 4. dev_webhook_logs Ë°®');
      console.log(`CREATE TABLE IF NOT EXISTS dev_webhook_logs (
        id SERIAL PRIMARY KEY,
        webhook_type VARCHAR(50) NOT NULL,
        status VARCHAR(50) NOT NULL DEFAULT 'received',
        payload JSONB NOT NULL,
        user_id VARCHAR(255),
        checkout_id VARCHAR(255),
        transaction_id VARCHAR(255),
        processed_at TIMESTAMP WITH TIME ZONE,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );`);
    }
  }
}

createPaymentTables();